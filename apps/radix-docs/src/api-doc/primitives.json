{
    "accordion": {
        "components": {}
    },
    "accordion-content-presence.directive": {
        "components": {}
    },
    "accordion-content.directive": {
        "components": {}
    },
    "accordion-header.directive": {
        "components": {}
    },
    "accordion-item.directive": {
        "components": {
            "RdxAccordionItemDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<undefined | string>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "A string value for the accordion item. All items within an accordion should use a unique value."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "Whether or not an accordion item is disabled from user interaction.\nWhen  `true` , prevents the user from interacting with the item."
                        }
                    ]
                }
            }
        }
    },
    "accordion-root.directive": {
        "components": {
            "RdxAccordionRootDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<Direction>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "The reading direction of the accordion when applicable. If omitted, assumes LTR (left-to-right) reading mode."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "Whether the Accordion is disabled."
                        },
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<DataOrientation>",
                            "default": "'vertical'",
                            "defaultValue": "'vertical'",
                            "description": "The orientation of the accordion."
                        },
                        {
                            "name": "defaultValue",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<undefined | string | string[]>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "The default active value of the item(s).\n\nUse when you do not need to control the state of the item(s)."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": true,
                            "type": "ModelSignal<undefined | AcceptableValue | AcceptableValue[]>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "The controlled value of the item to expand."
                        },
                        {
                            "name": "collapsible",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "When type is \"single\", allows closing content when clicking trigger for an open item.\nWhen type is \"multiple\", this prop has no effect."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<\"multiple\" | \"single\">",
                            "default": "'single'",
                            "defaultValue": "'single'",
                            "description": "Determines whether a \"single\" or \"multiple\" items can be selected at a time."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onValueChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "void"
                                }
                            ],
                            "description": "Event handler called when the expanded state of an item changes and type is \"multiple\"."
                        }
                    ]
                }
            }
        }
    },
    "accordion-trigger.directive": {
        "components": {}
    },
    "alert-dialog": {
        "components": {}
    },
    "alert-dialog-cancel.directive": {
        "components": {}
    },
    "alert-dialog-content.directive": {
        "components": {}
    },
    "alert-dialog-root.directive": {
        "components": {}
    },
    "alert-dialog-title.directive": {
        "components": {}
    },
    "alert-dialog-trigger.directive": {
        "components": {}
    },
    "alert-dialog.service": {
        "components": {}
    },
    "aspect-ratio": {
        "components": {}
    },
    "aspect-ratio.directive": {
        "components": {
            "RdxAspectRatioDirective": {
                "description": "Directive to maintain an aspect ratio for an element.\nThe element will have its  `padding-bottom`  dynamically calculated\nbased on the provided aspect ratio to maintain the desired ratio.\nThe content inside the element will be positioned absolutely.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "ratio",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<number, NumberInput>",
                            "default": "1",
                            "defaultValue": "1",
                            "description": "The desired aspect ratio (e.g., 16/9).\nBy default, it is set to 1 (which results in a square, 1:1)."
                        }
                    ]
                }
            }
        }
    },
    "avatar": {
        "components": {}
    },
    "avatar-context.token": {
        "components": {}
    },
    "avatar-fallback.directive": {
        "components": {
            "RdxAvatarFallbackDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "delayMs",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<number>",
                            "default": "0",
                            "defaultValue": "0",
                            "description": "Useful for delaying rendering so it only appears for those with slower connections."
                        }
                    ]
                }
            }
        }
    },
    "avatar-image.directive": {
        "components": {
            "RdxAvatarImageDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "src",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<undefined | string>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": ""
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onLoadingStatusChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "RdxImageLoadingStatus"
                                }
                            ],
                            "description": "A callback providing information about the loading status of the image.\nThis is useful in case you want to control more precisely what to render as the image is loading."
                        }
                    ]
                }
            }
        }
    },
    "avatar-root.directive": {
        "components": {}
    },
    "avatar.config": {
        "components": {}
    },
    "types": {
        "components": {}
    },
    "button.directive": {
        "components": {}
    },
    "calendar": {
        "components": {}
    },
    "calendar-cell-trigger.directive": {
        "components": {}
    },
    "calendar-cell.directive": {
        "components": {}
    },
    "calendar-grid-body.directive": {
        "components": {}
    },
    "calendar-grid-head.directive": {
        "components": {}
    },
    "calendar-grid-row.directive": {
        "components": {}
    },
    "calendar-grid.directive": {
        "components": {}
    },
    "calendar-head-cell.directive": {
        "components": {}
    },
    "calendar-header.directive": {
        "components": {}
    },
    "calendar-heading.directive": {
        "components": {}
    },
    "calendar-next.directive": {
        "components": {}
    },
    "calendar-prev.directive": {
        "components": {}
    },
    "calendar-root.directive": {
        "components": {}
    },
    "сalendar-сontext.token": {
        "components": {}
    },
    "checkbox": {
        "components": {}
    },
    "checkbox-button.directive": {
        "components": {}
    },
    "checkbox-indicator.directive": {
        "components": {}
    },
    "checkbox-input.directive": {
        "components": {}
    },
    "checkbox.directive": {
        "components": {
            "RdxCheckboxRootDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "The controlled checked state of the checkbox. Must be used in conjunction with onCheckedChange."
                        },
                        {
                            "name": "indeterminate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "Defines whether the checkbox is indeterminate."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "Defines whether the checkbox is disabled."
                        },
                        {
                            "name": "required",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "defaultValue": "false",
                            "description": ""
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "checkedChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Event emitted when the checkbox checked state changes."
                        },
                        {
                            "name": "indeterminateChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Event emitted when the indeterminate state changes."
                        }
                    ]
                }
            }
        }
    },
    "checkbox.token": {
        "components": {}
    },
    "collapsible": {
        "components": {}
    },
    "collapsible-content-presence.directive": {
        "components": {}
    },
    "collapsible-content.directive": {
        "components": {}
    },
    "collapsible-root.directive": {
        "components": {
            "RdxCollapsibleRootDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "open",
                            "optional": false,
                            "readonly": true,
                            "type": "ModelSignal<boolean>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "The controlled open state of the collapsible.\nSets the state of the directive.  `true`  - expanded,  `false`  - collapsed"
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "Determines whether a directive is available for interaction.\nWhen true, prevents the user from interacting with the collapsible."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onOpenChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Emitted with new value when directive state changed.\nEvent handler called when the open state of the collapsible changes."
                        }
                    ]
                }
            }
        }
    },
    "collapsible-trigger.directive": {
        "components": {}
    },
    "config": {
        "components": {}
    },
    "config.provider": {
        "components": {}
    },
    "context-menu": {
        "components": {}
    },
    "context-menu-content.directive": {
        "components": {}
    },
    "context-menu-item-checkbox.directive": {
        "components": {}
    },
    "context-menu-item-indicator.directive": {
        "components": {}
    },
    "context-menu-item-radio-group.directive": {
        "components": {}
    },
    "context-menu-item-radio.directive": {
        "components": {}
    },
    "context-menu-item-selectable": {
        "components": {}
    },
    "context-menu-item.directive": {
        "components": {}
    },
    "context-menu-label.directive": {
        "components": {}
    },
    "context-menu-separator.directive": {
        "components": {}
    },
    "context-menu-trigger.directive": {
        "components": {}
    },
    "core": {
        "components": {}
    },
    "control-value-accessor": {
        "components": {}
    },
    "provide-value-accessor": {
        "components": {}
    },
    "auto-focus.directive": {
        "components": {}
    },
    "chunk": {
        "components": {}
    },
    "clamp": {
        "components": {}
    },
    "create-context": {
        "components": {}
    },
    "comparators": {
        "components": {}
    },
    "formatter": {
        "components": {}
    },
    "date-time": {
        "components": {}
    },
    "parser": {
        "components": {}
    },
    "parts": {
        "components": {}
    },
    "placeholders": {
        "components": {}
    },
    "segment": {
        "components": {}
    },
    "useDateField": {
        "components": {}
    },
    "utils": {
        "components": {}
    },
    "document": {
        "components": {}
    },
    "focus-initial.directive": {
        "components": {}
    },
    "getActiveElement": {
        "components": {}
    },
    "id-generator": {
        "components": {}
    },
    "inject-ng-control": {
        "components": {}
    },
    "is-client": {
        "components": {}
    },
    "is-inside-form": {
        "components": {}
    },
    "is-nullish": {
        "components": {}
    },
    "is-number": {
        "components": {}
    },
    "kbd-constants": {
        "components": {}
    },
    "mount": {
        "components": {}
    },
    "constants": {
        "components": {}
    },
    "provide-token": {
        "components": {}
    },
    "useArrowNavigation": {
        "components": {}
    },
    "useResizeObserver": {
        "components": {}
    },
    "watch": {
        "components": {}
    },
    "window": {
        "components": {}
    },
    "cropper": {
        "components": {}
    },
    "cropper-context.token": {
        "components": {}
    },
    "cropper-crop-area.directive": {
        "components": {}
    },
    "cropper-description.directive": {
        "components": {}
    },
    "cropper-image.component": {
        "components": {}
    },
    "cropper-root.directive": {
        "components": {}
    },
    "date-field": {
        "components": {}
    },
    "date-field-context.token": {
        "components": {}
    },
    "date-field-input.directive": {
        "components": {}
    },
    "date-field-root.directive": {
        "components": {}
    },
    "dialog": {
        "components": {}
    },
    "dialog-close.directive": {
        "components": {}
    },
    "dialog-content.directive": {
        "components": {}
    },
    "dialog-description.directive": {
        "components": {}
    },
    "dialog-dismiss.directive": {
        "components": {}
    },
    "dialog-ref": {
        "components": {}
    },
    "dialog-title.directive": {
        "components": {}
    },
    "dialog-trigger.directive": {
        "components": {
            "RdxDialogTriggerDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<string>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": ""
                        },
                        {
                            "name": "dialog",
                            "optional": false,
                            "readonly": false,
                            "type": "TemplateRef<void>",
                            "description": ""
                        },
                        {
                            "name": "dialogConfig",
                            "optional": false,
                            "readonly": false,
                            "type": "Omit<RdxBaseDialogConfig<unknown>, \"data\">",
                            "description": ""
                        }
                    ]
                }
            }
        }
    },
    "dialog.config": {
        "components": {}
    },
    "dialog.injectors": {
        "components": {}
    },
    "dialog.providers": {
        "components": {}
    },
    "dialog.service": {
        "components": {}
    },
    "dropdown-menu": {
        "components": {}
    },
    "dropdown-menu-content.directive": {
        "components": {}
    },
    "dropdown-menu-item-checkbox.directive": {
        "components": {}
    },
    "dropdown-menu-item-indicator.directive": {
        "components": {}
    },
    "dropdown-menu-item-radio-group.directive": {
        "components": {}
    },
    "dropdown-menu-item-radio.directive": {
        "components": {}
    },
    "dropdown-menu-item-selectable": {
        "components": {}
    },
    "dropdown-menu-item.directive": {
        "components": {}
    },
    "dropdown-menu-label.directive": {
        "components": {}
    },
    "dropdown-menu-separator.directive": {
        "components": {}
    },
    "dropdown-menu-trigger.directive": {
        "components": {
            "RdxDropdownMenuTriggerDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "side",
                            "optional": false,
                            "readonly": false,
                            "type": "DropdownSide",
                            "description": "The preferred side of the trigger to render against when open.\nWill be reversed when collisions occur and  `avoidCollisions`  is enabled."
                        },
                        {
                            "name": "align",
                            "optional": false,
                            "readonly": false,
                            "type": "DropdownAlign",
                            "description": "The preferred alignment against the trigger. May change when collisions occur."
                        },
                        {
                            "name": "sideOffset",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "The distance in pixels from the trigger."
                        },
                        {
                            "name": "alignOffset",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "description": "An offset in pixels from the \"start\" or \"end\" alignment options."
                        }
                    ]
                }
            }
        }
    },
    "hover-card": {
        "components": {}
    },
    "hover-card-anchor.directive": {
        "components": {}
    },
    "hover-card-anchor.token": {
        "components": {}
    },
    "hover-card-arrow.directive": {
        "components": {}
    },
    "hover-card-arrow.token": {
        "components": {}
    },
    "hover-card-close.directive": {
        "components": {}
    },
    "hover-card-close.token": {
        "components": {}
    },
    "hover-card-content-attributes.component": {
        "components": {}
    },
    "hover-card-content-attributes.token": {
        "components": {}
    },
    "hover-card-content.directive": {
        "components": {}
    },
    "hover-card-root.directive": {
        "components": {}
    },
    "hover-card-root.inject": {
        "components": {}
    },
    "hover-card-trigger.directive": {
        "components": {}
    },
    "hover-card.types": {
        "components": {}
    },
    "cdk-event.service": {
        "components": {}
    },
    "containers.registry": {
        "components": {}
    },
    "option-panel-base.class": {
        "components": {}
    },
    "styles.constants": {
        "components": {}
    },
    "with-option-panel.component": {
        "components": {}
    },
    "jest.config": {
        "components": {}
    },
    "label": {
        "components": {}
    },
    "label.directive": {
        "components": {
            "RdxLabelDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "htmlFor",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<undefined | string>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "The id of the element the label is associated with."
                        }
                    ]
                }
            }
        }
    },
    "menu": {
        "components": {}
    },
    "menu-content.directive": {
        "components": {}
    },
    "menu-directive": {
        "components": {}
    },
    "menu-group.directive": {
        "components": {}
    },
    "menu-item-checkbox.directive": {
        "components": {}
    },
    "menu-item-indicator.directive": {
        "components": {}
    },
    "menu-item-radio.directive": {
        "components": {}
    },
    "menu-item.directive": {
        "components": {}
    },
    "menu-label.directive": {
        "components": {}
    },
    "menu-radio-group.directive": {
        "components": {}
    },
    "menu-separator.directive": {
        "components": {}
    },
    "menu-trigger.directive": {
        "components": {}
    },
    "menu-checkbox-items": {
        "components": {}
    },
    "menu-radio-items": {
        "components": {}
    },
    "menu-with-labels-items": {
        "components": {}
    },
    "menu-with-sub-menu": {
        "components": {}
    },
    "menubar": {
        "components": {}
    },
    "menubar-content.directive": {
        "components": {}
    },
    "menubar-group.directive": {
        "components": {}
    },
    "menubar-item-checkbox.directive": {
        "components": {}
    },
    "menubar-item-indicator.directive": {
        "components": {}
    },
    "menubar-item-radio.directive": {
        "components": {}
    },
    "menubar-item.directive": {
        "components": {}
    },
    "menubar-radio-group.directive": {
        "components": {}
    },
    "menubar-root.directive": {
        "components": {}
    },
    "menubar-separator.directive": {
        "components": {}
    },
    "menubar-trigger.directive": {
        "components": {}
    },
    "navigation-menu": {
        "components": {}
    },
    "navigation-menu-a11y.component": {
        "components": {}
    },
    "navigation-menu-content.directive": {
        "components": {}
    },
    "navigation-menu-indicator.directive": {
        "components": {}
    },
    "navigation-menu-item.directive": {
        "components": {}
    },
    "navigation-menu-link.directive": {
        "components": {}
    },
    "navigation-menu-list.directive": {
        "components": {}
    },
    "navigation-menu-sub.directive": {
        "components": {}
    },
    "navigation-menu-trigger.directive": {
        "components": {}
    },
    "navigation-menu-viewport.directive": {
        "components": {}
    },
    "navigation-menu.directive": {
        "components": {}
    },
    "navigation-menu.token": {
        "components": {}
    },
    "navigation-menu.types": {
        "components": {}
    },
    "number-field": {
        "components": {}
    },
    "number-field-context.token": {
        "components": {}
    },
    "number-field-decrement.directive": {
        "components": {}
    },
    "number-field-increment.directive": {
        "components": {}
    },
    "number-field-input.directive": {
        "components": {}
    },
    "number-field-root.directive": {
        "components": {}
    },
    "pagination": {
        "components": {}
    },
    "pagination-context.token": {
        "components": {}
    },
    "pagination-ellipsis.directive": {
        "components": {}
    },
    "pagination-first.directive": {
        "components": {}
    },
    "pagination-last.directive": {
        "components": {}
    },
    "pagination-list-item.directive": {
        "components": {}
    },
    "pagination-list.directive": {
        "components": {}
    },
    "pagination-next.directive": {
        "components": {}
    },
    "pagination-prev.directive": {
        "components": {}
    },
    "pagination-root.directive": {
        "components": {}
    },
    "popover": {
        "components": {}
    },
    "popover-anchor.directive": {
        "components": {}
    },
    "popover-anchor.token": {
        "components": {}
    },
    "popover-arrow.directive": {
        "components": {}
    },
    "popover-arrow.token": {
        "components": {}
    },
    "popover-close.directive": {
        "components": {}
    },
    "popover-close.token": {
        "components": {}
    },
    "popover-content-attributes.component": {
        "components": {}
    },
    "popover-content-attributes.token": {
        "components": {}
    },
    "popover-content.directive": {
        "components": {}
    },
    "popover-root.directive": {
        "components": {}
    },
    "popover-root.inject": {
        "components": {}
    },
    "popover-trigger.directive": {
        "components": {}
    },
    "popover.types": {
        "components": {}
    },
    "presence-test.component": {
        "components": {}
    },
    "presence": {
        "components": {}
    },
    "presence.directive": {
        "components": {}
    },
    "transition.collapse": {
        "components": {}
    },
    "transition.toast": {
        "components": {}
    },
    "progress": {
        "components": {}
    },
    "progress-indicator.directive": {
        "components": {}
    },
    "progress-root.directive": {
        "components": {
            "RdxProgressRootDirective": {
                "description": "Directive to manage progress bar state and attributes.\n\nThis directive provides a way to create a progress bar with customizable value and max attributes.\nIt handles aria attributes for accessibility and provides different states like 'indeterminate', 'complete', and 'loading'.",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": true,
                            "type": "ModelSignal<number>",
                            "default": "0",
                            "defaultValue": "0",
                            "description": "The current value of the progress bar."
                        },
                        {
                            "name": "max",
                            "optional": false,
                            "readonly": true,
                            "type": "ModelSignal<number>",
                            "default": "100",
                            "defaultValue": "100",
                            "description": "The maximum value of the progress bar."
                        },
                        {
                            "name": "valueLabel",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<(value: number, max: number) => string>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "Function to generate the value label."
                        }
                    ]
                }
            }
        }
    },
    "radio": {
        "components": {}
    },
    "radio-indicator.directive": {
        "components": {}
    },
    "radio-item-input.directive": {
        "components": {}
    },
    "radio-item.directive": {
        "components": {}
    },
    "radio-root.directive": {
        "components": {}
    },
    "radio-tokens": {
        "components": {}
    },
    "roving-focus": {
        "components": {}
    },
    "roving-focus-group.directive": {
        "components": {}
    },
    "roving-focus-item.directive": {
        "components": {}
    },
    "select": {
        "components": {}
    },
    "select-content.directive": {
        "components": {}
    },
    "select-group.directive": {
        "components": {}
    },
    "select-icon.directive": {
        "components": {}
    },
    "select-item-indicator.directive": {
        "components": {}
    },
    "select-item.directive": {
        "components": {}
    },
    "select-label.directive": {
        "components": {}
    },
    "select-separator.directive": {
        "components": {}
    },
    "select-trigger.directive": {
        "components": {}
    },
    "select-value.directive": {
        "components": {}
    },
    "select.component": {
        "components": {}
    },
    "separator": {
        "components": {}
    },
    "separator.directive": {
        "components": {
            "RdxSeparatorRootDirective": {
                "description": "Directive that adds accessible and configurable separator element to the DOM.\nThis can be either horizontal or vertical and optionally decorative (which removes\nit from the accessibility tree).",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<\"vertical\" | \"horizontal\">",
                            "default": "'horizontal'",
                            "defaultValue": "'horizontal'",
                            "description": "Orientation of the separator, can be either 'horizontal' or 'vertical'."
                        },
                        {
                            "name": "decorative",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "If true, the separator will be considered decorative and removed from\nthe accessibility tree. Defaults to false."
                        }
                    ]
                }
            }
        }
    },
    "slider": {
        "components": {}
    },
    "slider-horizontal.component": {
        "components": {}
    },
    "slider-impl.directive": {
        "components": {}
    },
    "slider-orientation-context.service": {
        "components": {}
    },
    "slider-range.component": {
        "components": {}
    },
    "slider-root.component": {
        "components": {
            "RdxSliderRootComponent": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "min",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<number, NumberInput>",
                            "default": "0",
                            "defaultValue": "0",
                            "description": "The minimum value for the range."
                        },
                        {
                            "name": "max",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<number, NumberInput>",
                            "default": "100",
                            "defaultValue": "100",
                            "description": "The maximum value for the range."
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<number, NumberInput>",
                            "default": "1",
                            "defaultValue": "1",
                            "description": "The stepping interval."
                        },
                        {
                            "name": "minStepsBetweenThumbs",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<number, NumberInput>",
                            "default": "0",
                            "defaultValue": "0",
                            "description": "The minimum permitted steps between multiple thumbs."
                        },
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<\"vertical\" | \"horizontal\">",
                            "default": "'horizontal'",
                            "defaultValue": "'horizontal'",
                            "description": "The orientation of the slider."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "When true, prevents the user from interacting with the slider."
                        },
                        {
                            "name": "inverted",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "Whether the slider is visually inverted."
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<\"ltr\" | \"rtl\">",
                            "default": "'ltr'",
                            "defaultValue": "'ltr'",
                            "description": "The reading direction of the combobox when applicable."
                        },
                        {
                            "name": "styleClass",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<undefined | string>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "modelValue",
                            "optional": false,
                            "readonly": true,
                            "type": "ModelSignal<number[]>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "The controlled value of the slider."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "valueChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number[]"
                                }
                            ],
                            "description": "Event handler called when the slider value changes."
                        },
                        {
                            "name": "valueCommit",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "number[]"
                                }
                            ],
                            "description": "Event handler called when the value changes at the end of an interaction.\n\nUseful when you only need to capture a final value e.g. to update a backend service."
                        }
                    ]
                }
            }
        }
    },
    "slider-thumb-impl.directive": {
        "components": {}
    },
    "slider-thumb.component": {
        "components": {}
    },
    "slider-track.component": {
        "components": {}
    },
    "slider-vertical.component": {
        "components": {}
    },
    "stepper": {
        "components": {}
    },
    "stepper-description.directive": {
        "components": {}
    },
    "stepper-indicator.directive": {
        "components": {}
    },
    "stepper-item-context.token": {
        "components": {}
    },
    "stepper-item.directive": {
        "components": {}
    },
    "stepper-root-context.token": {
        "components": {}
    },
    "stepper-root.directive": {
        "components": {}
    },
    "stepper-separator.directive": {
        "components": {}
    },
    "stepper-title.directive": {
        "components": {}
    },
    "stepper-trigger.directive": {
        "components": {}
    },
    "switch": {
        "components": {}
    },
    "switch-input.directive": {
        "components": {
            "RdxSwitchInputDirective": {
                "description": ""
            }
        }
    },
    "switch-root.directive": {
        "components": {
            "RdxSwitchRootDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "required",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "When true, indicates that the user must check the switch before the owning form can be submitted."
                        },
                        {
                            "name": "ariaLabelledBy",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<undefined | string>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<undefined | string>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "Used to define a string that autocomplete attribute the current element."
                        },
                        {
                            "name": "defaultChecked",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "The state of the switch when it is initially rendered. Use when you do not need to control its state."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": true,
                            "type": "ModelSignal<boolean>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "The controlled state of the switch. Must be used in conjunction with onCheckedChange."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "When  `true` , prevents the user from interacting with the switch."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onCheckedChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "undefined | boolean"
                                }
                            ],
                            "description": "Event handler called when the state of the switch changes."
                        }
                    ]
                }
            }
        }
    },
    "switch-thumb.directive": {
        "components": {
            "RdxSwitchThumbDirective": {
                "description": ""
            }
        }
    },
    "tabs": {
        "components": {}
    },
    "tabs-content.directive": {
        "components": {}
    },
    "tabs-list.directive": {
        "components": {}
    },
    "tabs-root.directive": {
        "components": {}
    },
    "tabs-trigger.directive": {
        "components": {}
    },
    "time-field": {
        "components": {}
    },
    "time-field-context.token": {
        "components": {}
    },
    "time-field-input.directive": {
        "components": {}
    },
    "time-field-root.directive": {
        "components": {}
    },
    "toggle-group": {
        "components": {}
    },
    "toggle-group-item.directive": {
        "components": {
            "RdxToggleGroupItemDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<string>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "The value of this toggle button."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "Whether this toggle button is disabled."
                        }
                    ]
                }
            }
        }
    },
    "toggle-group-item.token": {
        "components": {}
    },
    "toggle-group-without-focus.directive": {
        "components": {}
    },
    "toggle-group.directive": {
        "components": {
            "RdxToggleGroupDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": true,
                            "type": "ModelSignal<undefined | string | string[]>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": ""
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignal<\"multiple\" | \"single\">",
                            "default": "...",
                            "defaultValue": "...",
                            "description": ""
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "false",
                            "defaultValue": "false",
                            "description": "Whether the toggle group is disabled."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onValueChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "undefined | string | string[]"
                                }
                            ],
                            "description": "Event emitted when the selected toggle button changes."
                        }
                    ]
                }
            }
        }
    },
    "toggle-group.token": {
        "components": {}
    },
    "toggle": {
        "components": {}
    },
    "toggle-visually-hidden-input.directive": {
        "components": {}
    },
    "toggle.directive": {
        "components": {
            "RdxToggleDirective": {
                "description": "",
                "props": {
                    "description": "Defines the input properties of the component.",
                    "values": [
                        {
                            "name": "defaultPressed",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "The pressed state of the toggle when it is initially rendered.\nUse when you do not need to control its pressed state."
                        },
                        {
                            "name": "pressed",
                            "optional": false,
                            "readonly": true,
                            "type": "ModelSignal<boolean>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "The controlled pressed state of the toggle.\nMust be used in conjunction with  `onPressedChange` ."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": true,
                            "type": "InputSignalWithTransform<boolean, BooleanInput>",
                            "default": "...",
                            "defaultValue": "...",
                            "description": "When true, prevents the user from interacting with the toggle."
                        }
                    ]
                },
                "emits": {
                    "description": "Defines emit that determine the behavior of the component based on a given condition or report the actions that the component takes.",
                    "values": [
                        {
                            "name": "onPressedChange",
                            "parameters": [
                                {
                                    "name": "value",
                                    "type": "boolean"
                                }
                            ],
                            "description": "Event handler called when the pressed state of the toggle changes."
                        }
                    ]
                }
            }
        }
    },
    "toolbar": {
        "components": {}
    },
    "toolbar-button.directive": {
        "components": {}
    },
    "toolbar-link.directive": {
        "components": {}
    },
    "toolbar-root.directive": {
        "components": {}
    },
    "toolbar-root.token": {
        "components": {}
    },
    "toolbar-separator.directive": {
        "components": {}
    },
    "toolbar-toggle-group.directive": {
        "components": {}
    },
    "toolbar-toggle-item.directive": {
        "components": {}
    },
    "tooltip": {
        "components": {}
    },
    "tooltip-anchor.directive": {
        "components": {}
    },
    "tooltip-anchor.token": {
        "components": {}
    },
    "tooltip-arrow.directive": {
        "components": {}
    },
    "tooltip-arrow.token": {
        "components": {}
    },
    "tooltip-close.directive": {
        "components": {}
    },
    "tooltip-close.token": {
        "components": {}
    },
    "tooltip-content-attributes.component": {
        "components": {}
    },
    "tooltip-content-attributes.token": {
        "components": {}
    },
    "tooltip-content.directive": {
        "components": {}
    },
    "tooltip-root.directive": {
        "components": {}
    },
    "tooltip-root.inject": {
        "components": {}
    },
    "tooltip-trigger.directive": {
        "components": {}
    },
    "tooltip.types": {
        "components": {}
    },
    "visually-hidden": {
        "components": {}
    },
    "visually-hidden-input-bubble.directive": {
        "components": {}
    },
    "visually-hidden-input.directive": {
        "components": {}
    },
    "visually-hidden.directive": {
        "components": {}
    }
}
